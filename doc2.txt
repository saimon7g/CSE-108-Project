# Football Transfer Market System
A comprehensive JavaFX-based football transfer market simulation with real-time trading capabilities.

## System Features

### 1. Authentication System (`LogIn.java`)
- Club-based login system
- Premier League club credentials
- Password protection
- Interactive UI with Premier League logo

### 2. Home Dashboard (`HomePage.java`)
Features:
- Player search by multiple criteria
- Team statistics
- Transfer market access
- Club analytics
- Session management

### 3. Transfer Market System
#### Buy Interface (`BuyPlayer.java`)
- Available players listing
- Real-time price updates
- Purchase confirmation
- Market monitoring

#### Sell Interface (`SellPlayer.java`)
- Current roster management
- Price setting
- Sale listing
- Transaction tracking

### 4. Player Display (`ShowPlayer.java`)
Displays player attributes:
- Name, Country, Age
- Height, Position, Number
- Salary and Transfer Price
- Current Club
- Buy/Sell controls

## User Interface Components

### 1. Login Screen
```java
@FXML components:
- ImageView imageView       // Premier League logo
- TextField LogInBox       // Club name input
- PasswordField passWord  // Secure password input
```

### 2. Home Page
```java
@FXML components:
- GridPane grid           // Player display grid
- ScrollPane scrollPane  // Scrollable content
- ListView<String> list // Statistics display
```

### 3. Search Functions
Available search criteria:
- Player name
- Country
- Position
- Salary range
- Age/Height maximums

### 4. Transfer Market Interface
Buy View:
```java
GridPane grid // Displays available players
Button transfer // Buy/Cancel buttons
TextField priceBox // Price input for sales
```

Sell View:
```java
GridPane grid // Current roster display
Button transfer // Sale listing control
TextField pricebox // Price setting
```

## Data Flow

### 1. Authentication Flow
```java
LogInAttempt() -> Client Connection -> Server Validation -> HomePage
```

### 2. Search Operations
```java
SearchPressed() -> Query Processing -> GridPane Update -> Player Display
```

### 3. Transfer Operations
Buy Process:
```java
setDataforBuy() -> Price Verification -> Transfer Request -> Market Update
```

Sell Process:
```java
setDataforSale() -> Price Setting -> Market Listing -> Broadcast Update
```

## State Management

### Client States
1. Initial (1)
2. Authenticated (2)
3. Buy Mode (3)
4. Sell Mode (4)

### UI States
1. Search Mode
2. Statistics View
3. Transfer Market
4. Player Display

## Error Handling

### Input Validation
```java
// Price validation
try {
    int price = Integer.parseInt(priceBox.getText());
} catch (Exception e) {
    showAlert("Invalid Input", "Input Should be Integer");
}
```

### Network Errors
- Connection loss handling
- Transaction failure recovery
- Session management

## UI Components Hierarchy

### 1. Main Window
```
Stage
└── Scene
    └── Parent
        ├── GridPane (Player Display)
        ├── ScrollPane (Content)
        └── Controls (Buttons/Inputs)
```

### 2. Player Cards
```
AnchorPane
├── Player Information (Text)
├── Transfer Controls
└── Price Input (if applicable)
```

## Implementation Details

### 1. Scene Navigation
```java
FXMLLoader loader = new FXMLLoader();
loader.setLocation(getClass().getResource("fxml_file.fxml"));
Parent root = loader.load();
stage.setScene(new Scene(root));
```

### 2. Data Binding
```java
controller.setClient(client);
controller.setData(playerObject);
```

### 3. Real-time Updates
```java
Platform.runLater(() -> {
    updateUI();
});
```

## UI/UX Features

### 1. Interactive Elements
- Dynamic grid layouts
- Responsive controls
- Real-time updates
- Error alerts

### 2. Visual Feedback
- Success/Error alerts
- Transaction confirmations
- Status updates

### 3. Navigation
- Home button
- Back functionality
- Logout option
- Market access

## Setup Requirements

### Development Environment
- Java JDK 8+
- JavaFX SDK
- Scene Builder
- IDE with JavaFX support

### Resource Files
- FXML layouts
- Image assets
- CSS styles
- Configuration files

## FXML Structure
```
/fxmlController/
├── LogIn.fxml
├── HomePage.fxml
├── BuyPlayer.fxml
├── SellPlayer.fxml
└── ShowPlayer.fxml
```

## Best Practices

### 1. Code Organization
- FXML/Controller separation
- Event handling patterns
- Resource management
- Error handling

### 2. UI Design
- Consistent layouts
- Responsive elements
- User feedback
- Error messaging

### 3. Performance
- Efficient updates
- Resource cleanup
- Memory management
- Thread safety

## Future Enhancements
1. Advanced statistics
2. Transfer history
3. Player performance tracking
4. Market analytics
5. Club financial management

This documentation provides a comprehensive overview of the Football Transfer Market System's UI implementation and functionality. For specific implementation details, refer to the individual controller classes and FXML files.