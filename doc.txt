# Football Transfer Market System
A real-time football player transfer market simulation system built with JavaFX and Socket Programming.

## System Overview
This system allows multiple football clubs to connect simultaneously, manage their players, and participate in a live transfer market. Users can buy/sell players, view statistics, and manage their club's roster in real-time.

## Features

### 1. Authentication System
- Secure club-based login
- Predefined club credentials:
  - Arsenal (arsenal)
  - Chelsea (chelsea)
  - Liverpool (liverpool)
  - Manchester United (manu)
  - Manchester City (mancity)

### 2. Club Management
- View club roster
- Player statistics
- Team analytics
- Financial management

### 3. Player Management
Search and filter players by:
- Name
- Country
- Position
- Salary range
- Club affiliation

### 4. Transfer Market
- Real-time player listings
- Buy/Sell operations
- Price negotiations
- Live market updates

### 5. Analytics
- Club salary statistics
- Player performance metrics
- Country-wise player distribution
- Maximum salary/age/height tracking

## Technical Architecture

### Client Side

#### Components
1. **Client Module** (`Client.java`)
   - Manages server connection
   - Handles authentication
   - Controls application state

2. **Club Manager** (`Club.java`)
   - Player roster management
   - Transfer operations
   - Team statistics

3. **Player Model** (`Player.java`)
   - Player attributes
   - Performance metrics
   - Contract details

4. **Network Handler** (`ReadThreadClient.java`)
   - Asynchronous communication
   - Real-time updates
   - Market synchronization

### Server Side

1. **Server Core** (`Server.java`)
   - Client connection management
   - Transfer market operations
   - Data synchronization

2. **Data Persistence** (`FileOperation.java`)
   - Player data storage
   - File I/O operations
   - Data format: CSV structure

3. **Client Handler** (`ReadThreadServer.java`)
   - Individual client communication
   - Request processing
   - Market updates

### Network Protocol

#### Message System (`Message.java`)
```java
public class Message implements Serializable {
    private String instruction;  // Command type
    private String info;        // Additional data
    private Player player;      // Player information
}
```

#### Network Utility (`NetworkUtil.java`)
- Custom socket wrapper
- Object serialization
- Connection management

## Data Structure

### Player Data Format
```
Name,Country,Age,Height,ClubName,Position,Number,Salary
```

### Collections Used
- `HashMap<Integer, NetworkUtil>`: Client connections
- `List<Player>`: Player rosters
- `ObservableList<String>`: UI data binding

## Implementation Details

### 1. Server Setup
```java
ServerSocket serverSocket = new ServerSocket(7777);
```

### 2. Client Connection
```java
NetworkUtil networkUtil = new NetworkUtil(serverAddress, serverPort);
```

### 3. Transfer Operations
```java
// Sale Request
Message saleRequest = new Message();
saleRequest.setInstruction("SaleRequest");
saleRequest.setPlayer(playerObject);

// Buy Request
Message buyRequest = new Message();
buyRequest.setInstruction("BuyRequest");
buyRequest.setPlayer(playerObject);
```

## User Interface (JavaFX)

### Windows
1. Login Screen
2. Home Page
3. Transfer Market
4. Player Statistics
5. Club Management

### Features
- Real-time updates
- Interactive tables
- Search functionality
- Statistical displays

## Setup Instructions

### Prerequisites
- Java JDK 8+
- JavaFX SDK
- Network access
- File system permissions

### Server Deployment
1. Prepare player data file
2. Configure server port
3. Start server application

### Client Setup
1. Configure server address
2. Install JavaFX
3. Launch client application

## Security Measures

### Authentication
- Password protection
- Session management
- Club-specific access

### Data Protection
- Secure file operations
- Protected communications
- Validated transactions

## Error Handling

### Network Errors
- Connection failures
- Timeout management
- Reconnection logic

### Data Validation
- Input validation
- Transaction verification
- File operation checks

## Best Practices

### Code Organization
- MVC pattern
- Modular design
- Clean architecture

### Performance
- Asynchronous operations
- Resource management
- Memory optimization

### UI/UX
- Responsive design
- Real-time updates
- User feedback

## System Requirements

### Server
- OS: Windows/Linux/macOS
- RAM: 2GB minimum
- Port: 7777 available
- Storage: 100MB minimum

### Client
- Java Runtime Environment 8+
- JavaFX compatible system
- Network connectivity
- 1GB RAM minimum

## Known Limitations
- Maximum 7 players per club
- Predefined club list
- Fixed port configuration
- Single server instance

## Future Enhancements
1. Dynamic club registration
2. Advanced statistics
3. Player performance tracking
4. Transfer history
5. Market analysis tools

## Support
For technical issues:
- Check network connectivity
- Verify file permissions
- Ensure correct credentials
- Monitor server logs

## Development Guidelines

### Code Contributions
1. Follow existing patterns
2. Maintain thread safety
3. Document new features
4. Test thoroughly

### Testing
- Unit tests for core logic
- Integration tests for networking
- UI/UX testing
- Performance testing

This documentation provides a comprehensive overview of the Football Transfer Market System. The system combines real-time networking, data persistence, and a user-friendly interface to create an interactive football player trading platform.

For specific implementation details or further documentation, please refer to the inline code comments and individual class documentation.